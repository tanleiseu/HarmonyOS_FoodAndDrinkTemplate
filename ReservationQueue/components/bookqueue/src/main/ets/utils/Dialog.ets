import { ComponentContent, promptAction } from '@kit.ArkUI';
import { BusinessError } from '@kit.BasicServicesKit';
import { CommonConstants, RouterMap } from '../constants/Common';
import { Logger } from './Logger';
import { RouterModule } from './RouterModule';

const TAG = '[Dialog]';

export class Dialog {
  private static _ctx: UIContext;
  private static _contentNode: ComponentContent<Object>;
  private static _options: promptAction.BaseDialogOptions;
  private static _hasInit: boolean;

  public static init(ctx: UIContext) {
    if (Dialog._hasInit) {
      return;
    }
    Dialog._ctx = ctx;
    Dialog._contentNode = new ComponentContent(Dialog._ctx, wrapBuilder(dialogView));
    Dialog._options = {
      alignment: DialogAlignment.Center,
      transition: TransitionEffect.OPACITY,
      autoCancel: false,
    };
    Dialog._hasInit = true;
  }

  public static open() {
    if (Dialog._contentNode !== null) {
      Dialog._ctx.getPromptAction()
        .openCustomDialog(Dialog._contentNode, Dialog._options)
        .then(() => {
          Logger.info(TAG, 'OpenCustomDialog complete.');
        })
        .catch((error: BusinessError) => {
          let message = (error as BusinessError).message;
          let code = (error as BusinessError).code;
          Logger.error(TAG, `OpenCustomDialog args error code is ${code}, message is ${message}`);
        });
    }
  }

  public static close() {
    if (Dialog._contentNode !== null) {
      Dialog._ctx.getPromptAction()
        .closeCustomDialog(Dialog._contentNode)
        .then(() => {
          Logger.info(TAG, 'CloseCustomDialog complete.');
        })
        .catch((error: BusinessError) => {
          let message = (error as BusinessError).message;
          let code = (error as BusinessError).code;
          Logger.error(TAG, `CloseCustomDialog args error code is ${code}, message is ${message}`);
        });
    }
  }
}

@Builder
export function dialogView() {
  Column() {
    Column() {
      Row({ space: 22 }) {
        Text('当前门店').fontColor($r('sys.color.font_primary')).titleStyle()
        Text('暂未排队').fontColor($r('app.color.brand_red')).titleStyle()
      }

      Text('您可以直接到店进餐～').fontColor($r('sys.color.font_primary')).titleStyle().margin({ top: 12, bottom: 26 })

      Row({ space: 12 }) {
        Text('我知道了')
          .btnStyle()
          .fontColor($r('app.color.brand_red'))
          .border({ color: $r('app.color.brand_red'), width: 1 })
          .onClick(() => {
            Dialog.close();
          })

        Text('去订座')
          .btnStyle()
          .backgroundColor($r('app.color.brand_red'))
          .fontColor($r('app.color.system_color_background_white'))
          .onClick(() => {
            Dialog.close();
            RouterModule.push({ url: RouterMap.BOOK_PAGE });
          })
      }
    }
    .alignItems(HorizontalAlign.Start)
    .height(164)
    .width('calc(100% - 32vp)')
    .backgroundColor($r('app.color.system_color_background_white'))
    .borderRadius($r('app.string.border_radius_16'))
    .padding({
      left: 18,
      right: 18,
      top: 16,
      bottom: 16,
    })
  }
  .padding({ top: 250 })
  .width(CommonConstants.FULL_WIDTH)
  .height(CommonConstants.FULL_HEIGHT)
  .backgroundColor($r('sys.color.mask_fourth'))
}

@Extend(Text)
function titleStyle() {
  .fontSize($r('sys.float.Title_S'))
  .fontWeight(FontWeight.Bold)
}

@Extend(Text)
function btnStyle() {
  .height(40)
  .borderRadius(20)
  .layoutWeight(1)
  .textAlign(TextAlign.Center)
  .fontWeight(FontWeight.Bold)
}